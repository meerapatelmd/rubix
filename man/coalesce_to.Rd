% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coalesce_.R
\name{coalesce_to}
\alias{coalesce_to}
\title{Coalesce 1+ Fields to a New Field}
\usage{
coalesce_to(data, col, ..., remove = FALSE)
}
\arguments{
\item{data}{A dataframe or tibble.}

\item{col}{Target column.}

\item{...}{Other columns in addition to `col` that will be coalesced in the correct order of precedence.}

\item{remove}{Should columns supplied in `...` be removed in the output?}
}
\description{
(Deprecated) This is 1 of 2 coalesce functions. This one takes fields that are not the same as the proposed new column name. For example, a dataframe with fields "A", "B", and "C" can be coalesced into a field "D". If all the values need to be coalesced into an existing field such as "A", "B", and "C" to "A", use coalesce_at function instead.
}
\examples{
library(tidyverse)
test_data <- 
        tibble(A = sample(c(NA_integer_, 1:3), size = 10, replace = TRUE),
              B = sample(c(NA_integer_, 4:6), size = 10, replace = TRUE),
              C = sample(c(NA_integer_, 7:9), size = 10, replace = TRUE))

# Coalesce at an existing column
coalesce_at(test_data,
            col = A,
            B, 
            C,
            remove = FALSE)

coalesce_at(test_data,
            col = A,
            B, 
            C,
            remove = TRUE)


# Coalesce to a new column
coalesce_to(
        test_data,
        col = A2,
        B, 
        C,
        remove = FALSE
)

coalesce_to(
        test_data,
        col = A2,
        B, 
        C,
        remove = TRUE
)
}
\seealso{
\code{\link[dplyr]{tidyeval-compat}},\code{\link[dplyr]{select}},\code{\link[dplyr]{mutate}},\code{\link[dplyr]{coalesce}}

Other coalesce functions: 
\code{\link{coalesce_at}()}
}
\concept{coalesce functions}
